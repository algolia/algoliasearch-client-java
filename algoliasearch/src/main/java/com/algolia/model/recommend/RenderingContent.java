// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.recommend;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.Objects;

/**
 * Extra data that can be used in the search UI. You can use this to control aspects of your search
 * UI, such as, the order of facet names and values without changing your frontend code.
 */
public class RenderingContent {

  @JsonProperty("facetOrdering")
  private FacetOrdering facetOrdering;

  @JsonProperty("redirect")
  private RedirectURL redirect;

  public RenderingContent setFacetOrdering(FacetOrdering facetOrdering) {
    this.facetOrdering = facetOrdering;
    return this;
  }

  /** Get facetOrdering */
  @javax.annotation.Nullable
  public FacetOrdering getFacetOrdering() {
    return facetOrdering;
  }

  public RenderingContent setRedirect(RedirectURL redirect) {
    this.redirect = redirect;
    return this;
  }

  /** Get redirect */
  @javax.annotation.Nullable
  public RedirectURL getRedirect() {
    return redirect;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RenderingContent renderingContent = (RenderingContent) o;
    return Objects.equals(this.facetOrdering, renderingContent.facetOrdering) && Objects.equals(this.redirect, renderingContent.redirect);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facetOrdering, redirect);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RenderingContent {\n");
    sb.append("    facetOrdering: ").append(toIndentedString(facetOrdering)).append("\n");
    sb.append("    redirect: ").append(toIndentedString(redirect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
