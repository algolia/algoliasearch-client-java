// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.recommend;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.Objects;

/**
 * Facet attribute. Only recommendations with the same value (or only recommendations with a
 * different value) as the original viewed item are included.
 */
public class AutoFacetFilter {

  @JsonProperty("facet")
  private String facet;

  @JsonProperty("negative")
  private Boolean negative;

  public AutoFacetFilter setFacet(String facet) {
    this.facet = facet;
    return this;
  }

  /** Facet attribute. */
  @javax.annotation.Nullable
  public String getFacet() {
    return facet;
  }

  public AutoFacetFilter setNegative(Boolean negative) {
    this.negative = negative;
    return this;
  }

  /**
   * Whether the filter is negative. If true, recommendations must not have the same value for the
   * `facet` attribute. If false, recommendations must have the same value for the `facet`
   * attribute.
   */
  @javax.annotation.Nullable
  public Boolean getNegative() {
    return negative;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoFacetFilter autoFacetFilter = (AutoFacetFilter) o;
    return Objects.equals(this.facet, autoFacetFilter.facet) && Objects.equals(this.negative, autoFacetFilter.negative);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facet, negative);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoFacetFilter {\n");
    sb.append("    facet: ").append(toIndentedString(facet)).append("\n");
    sb.append("    negative: ").append(toIndentedString(negative)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
