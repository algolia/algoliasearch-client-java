// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.composition;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.Objects;

/** RulesMultipleBatchRequest */
public class RulesMultipleBatchRequest {

  @JsonProperty("action")
  private Action action;

  @JsonProperty("body")
  private RulesBatchCompositionAction body;

  public RulesMultipleBatchRequest setAction(Action action) {
    this.action = action;
    return this;
  }

  /** Get action */
  @javax.annotation.Nonnull
  public Action getAction() {
    return action;
  }

  public RulesMultipleBatchRequest setBody(RulesBatchCompositionAction body) {
    this.body = body;
    return this;
  }

  /** Get body */
  @javax.annotation.Nonnull
  public RulesBatchCompositionAction getBody() {
    return body;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RulesMultipleBatchRequest rulesMultipleBatchRequest = (RulesMultipleBatchRequest) o;
    return Objects.equals(this.action, rulesMultipleBatchRequest.action) && Objects.equals(this.body, rulesMultipleBatchRequest.body);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, body);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RulesMultipleBatchRequest {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
