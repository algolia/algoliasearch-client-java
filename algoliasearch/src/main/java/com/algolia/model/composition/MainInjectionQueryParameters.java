// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.composition;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** MainInjectionQueryParameters */
public class MainInjectionQueryParameters {

  @JsonProperty("advancedSyntax")
  private Boolean advancedSyntax;

  @JsonProperty("advancedSyntaxFeatures")
  private List<AdvancedSyntaxFeatures> advancedSyntaxFeatures;

  @JsonProperty("allowTyposOnNumericTokens")
  private Boolean allowTyposOnNumericTokens;

  @JsonProperty("alternativesAsExact")
  private List<AlternativesAsExact> alternativesAsExact;

  @JsonProperty("analytics")
  private Boolean analytics;

  @JsonProperty("attributeCriteriaComputedByMinProximity")
  private Boolean attributeCriteriaComputedByMinProximity;

  @JsonProperty("attributesToHighlight")
  private List<String> attributesToHighlight;

  @JsonProperty("attributesToRetrieve")
  private List<String> attributesToRetrieve;

  @JsonProperty("attributesToSnippet")
  private List<String> attributesToSnippet;

  @JsonProperty("clickAnalytics")
  private Boolean clickAnalytics;

  @JsonProperty("decompoundQuery")
  private Boolean decompoundQuery;

  @JsonProperty("disableExactOnAttributes")
  private List<String> disableExactOnAttributes;

  @JsonProperty("disableTypoToleranceOnAttributes")
  private List<String> disableTypoToleranceOnAttributes;

  @JsonProperty("distinct")
  private Distinct distinct;

  @JsonProperty("enableABTest")
  private Boolean enableABTest;

  @JsonProperty("enablePersonalization")
  private Boolean enablePersonalization;

  @JsonProperty("enableReRanking")
  private Boolean enableReRanking;

  @JsonProperty("enableRules")
  private Boolean enableRules;

  @JsonProperty("exactOnSingleWordQuery")
  private ExactOnSingleWordQuery exactOnSingleWordQuery;

  @JsonProperty("facetFilters")
  private FacetFilters facetFilters;

  @JsonProperty("filters")
  private String filters;

  @JsonProperty("getRankingInfo")
  private Boolean getRankingInfo;

  @JsonProperty("highlightPostTag")
  private String highlightPostTag;

  @JsonProperty("highlightPreTag")
  private String highlightPreTag;

  @JsonProperty("ignorePlurals")
  private IgnorePlurals ignorePlurals;

  @JsonProperty("maxFacetHits")
  private Integer maxFacetHits;

  @JsonProperty("minProximity")
  private Integer minProximity;

  @JsonProperty("minWordSizefor1Typo")
  private Integer minWordSizefor1Typo;

  @JsonProperty("minWordSizefor2Typos")
  private Integer minWordSizefor2Typos;

  @JsonProperty("naturalLanguages")
  private List<SupportedLanguage> naturalLanguages;

  @JsonProperty("numericFilters")
  private NumericFilters numericFilters;

  @JsonProperty("optionalFilters")
  private OptionalFilters optionalFilters;

  @JsonProperty("optionalWords")
  private OptionalWords optionalWords;

  @JsonProperty("percentileComputation")
  private Boolean percentileComputation;

  @JsonProperty("personalizationImpact")
  private Integer personalizationImpact;

  @JsonProperty("queryLanguages")
  private List<SupportedLanguage> queryLanguages;

  @JsonProperty("queryType")
  private QueryType queryType;

  @JsonProperty("removeStopWords")
  private RemoveStopWords removeStopWords;

  @JsonProperty("removeWordsIfNoResults")
  private RemoveWordsIfNoResults removeWordsIfNoResults;

  @JsonProperty("replaceSynonymsInHighlight")
  private Boolean replaceSynonymsInHighlight;

  @JsonProperty("responseFields")
  private List<String> responseFields;

  @JsonProperty("restrictHighlightAndSnippetArrays")
  private Boolean restrictHighlightAndSnippetArrays;

  @JsonProperty("restrictSearchableAttributes")
  private List<String> restrictSearchableAttributes;

  @JsonProperty("ruleContexts")
  private List<String> ruleContexts;

  @JsonProperty("snippetEllipsisText")
  private String snippetEllipsisText;

  @JsonProperty("synonyms")
  private Boolean synonyms;

  @JsonProperty("typoTolerance")
  private TypoTolerance typoTolerance;

  @JsonProperty("facetingAfterDistinct")
  private Boolean facetingAfterDistinct;

  @JsonProperty("facets")
  private List<String> facets;

  @JsonProperty("hitsPerPage")
  private Integer hitsPerPage;

  @JsonProperty("maxValuesPerFacet")
  private Integer maxValuesPerFacet;

  @JsonProperty("renderingContent")
  private RenderingContent renderingContent;

  @JsonProperty("sortFacetValuesBy")
  private String sortFacetValuesBy;

  @JsonProperty("sumOrFiltersScores")
  private Boolean sumOrFiltersScores;

  public MainInjectionQueryParameters setAdvancedSyntax(Boolean advancedSyntax) {
    this.advancedSyntax = advancedSyntax;
    return this;
  }

  /**
   * Whether to support phrase matching and excluding words from search queries Use the
   * `advancedSyntaxFeatures` parameter to control which feature is supported.
   */
  @javax.annotation.Nullable
  public Boolean getAdvancedSyntax() {
    return advancedSyntax;
  }

  public MainInjectionQueryParameters setAdvancedSyntaxFeatures(List<AdvancedSyntaxFeatures> advancedSyntaxFeatures) {
    this.advancedSyntaxFeatures = advancedSyntaxFeatures;
    return this;
  }

  public MainInjectionQueryParameters addAdvancedSyntaxFeatures(AdvancedSyntaxFeatures advancedSyntaxFeaturesItem) {
    if (this.advancedSyntaxFeatures == null) {
      this.advancedSyntaxFeatures = new ArrayList<>();
    }
    this.advancedSyntaxFeatures.add(advancedSyntaxFeaturesItem);
    return this;
  }

  /**
   * Advanced search syntax features you want to support - `exactPhrase`. Phrases in quotes must
   * match exactly. For example, `sparkly blue \"iPhone case\"` only returns records with the exact
   * string \"iPhone case\" - `excludeWords`. Query words prefixed with a `-` must not occur in a
   * record. For example, `search -engine` matches records that contain \"search\" but not
   * \"engine\" This setting only has an effect if `advancedSyntax` is true.
   */
  @javax.annotation.Nullable
  public List<AdvancedSyntaxFeatures> getAdvancedSyntaxFeatures() {
    return advancedSyntaxFeatures;
  }

  public MainInjectionQueryParameters setAllowTyposOnNumericTokens(Boolean allowTyposOnNumericTokens) {
    this.allowTyposOnNumericTokens = allowTyposOnNumericTokens;
    return this;
  }

  /**
   * Whether to allow typos on numbers in the search query Turn off this setting to reduce the
   * number of irrelevant matches when searching in large sets of similar numbers.
   */
  @javax.annotation.Nullable
  public Boolean getAllowTyposOnNumericTokens() {
    return allowTyposOnNumericTokens;
  }

  public MainInjectionQueryParameters setAlternativesAsExact(List<AlternativesAsExact> alternativesAsExact) {
    this.alternativesAsExact = alternativesAsExact;
    return this;
  }

  public MainInjectionQueryParameters addAlternativesAsExact(AlternativesAsExact alternativesAsExactItem) {
    if (this.alternativesAsExact == null) {
      this.alternativesAsExact = new ArrayList<>();
    }
    this.alternativesAsExact.add(alternativesAsExactItem);
    return this;
  }

  /**
   * Determine which plurals and synonyms should be considered an exact matches By default, Algolia
   * treats singular and plural forms of a word, and single-word synonyms, as
   * [exact](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#exact)
   * matches when searching. For example - \"swimsuit\" and \"swimsuits\" are treated the same -
   * \"swimsuit\" and \"swimwear\" are treated the same (if they are
   * [synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#regular-synonyms))
   * - `ignorePlurals`. Plurals and similar declensions added by the `ignorePlurals` setting are
   * considered exact matches - `singleWordSynonym`. Single-word synonyms, such as \"NY\" = \"NYC\",
   * are considered exact matches - `multiWordsSynonym`. Multi-word synonyms, such as \"NY\" = \"New
   * York\", are considered exact matches.
   */
  @javax.annotation.Nullable
  public List<AlternativesAsExact> getAlternativesAsExact() {
    return alternativesAsExact;
  }

  public MainInjectionQueryParameters setAnalytics(Boolean analytics) {
    this.analytics = analytics;
    return this;
  }

  /** Whether this search will be included in Analytics. */
  @javax.annotation.Nullable
  public Boolean getAnalytics() {
    return analytics;
  }

  public MainInjectionQueryParameters setAttributeCriteriaComputedByMinProximity(Boolean attributeCriteriaComputedByMinProximity) {
    this.attributeCriteriaComputedByMinProximity = attributeCriteriaComputedByMinProximity;
    return this;
  }

  /**
   * Whether the best matching attribute should be determined by minimum proximity This setting only
   * affects ranking if the Attribute ranking criterion comes before Proximity in the `ranking`
   * setting. If true, the best matching attribute is selected based on the minimum proximity of
   * multiple matches. Otherwise, the best matching attribute is determined by the order in the
   * `searchableAttributes` setting.
   */
  @javax.annotation.Nullable
  public Boolean getAttributeCriteriaComputedByMinProximity() {
    return attributeCriteriaComputedByMinProximity;
  }

  public MainInjectionQueryParameters setAttributesToHighlight(List<String> attributesToHighlight) {
    this.attributesToHighlight = attributesToHighlight;
    return this;
  }

  public MainInjectionQueryParameters addAttributesToHighlight(String attributesToHighlightItem) {
    if (this.attributesToHighlight == null) {
      this.attributesToHighlight = new ArrayList<>();
    }
    this.attributesToHighlight.add(attributesToHighlightItem);
    return this;
  }

  /**
   * Attributes to highlight By default, all searchable attributes are highlighted. Use `*` to
   * highlight all attributes or use an empty array `[]` to turn off highlighting. Attribute names
   * are case-sensitive With highlighting, strings that match the search query are surrounded by
   * HTML tags defined by `highlightPreTag` and `highlightPostTag`. You can use this to visually
   * highlight matching parts of a search query in your UI For more information, see [Highlighting
   * and
   * snippeting](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/highlighting-snippeting/js).
   */
  @javax.annotation.Nullable
  public List<String> getAttributesToHighlight() {
    return attributesToHighlight;
  }

  public MainInjectionQueryParameters setAttributesToRetrieve(List<String> attributesToRetrieve) {
    this.attributesToRetrieve = attributesToRetrieve;
    return this;
  }

  public MainInjectionQueryParameters addAttributesToRetrieve(String attributesToRetrieveItem) {
    if (this.attributesToRetrieve == null) {
      this.attributesToRetrieve = new ArrayList<>();
    }
    this.attributesToRetrieve.add(attributesToRetrieveItem);
    return this;
  }

  /**
   * Attributes to include in the API response To reduce the size of your response, you can retrieve
   * only some of the attributes. Attribute names are case-sensitive - `*` retrieves all attributes,
   * except attributes included in the `customRanking` and `unretrievableAttributes` settings. - To
   * retrieve all attributes except a specific one, prefix the attribute with a dash and combine it
   * with the `*`: `[\"*\", \"-ATTRIBUTE\"]`. - The `objectID` attribute is always included.
   */
  @javax.annotation.Nullable
  public List<String> getAttributesToRetrieve() {
    return attributesToRetrieve;
  }

  public MainInjectionQueryParameters setAttributesToSnippet(List<String> attributesToSnippet) {
    this.attributesToSnippet = attributesToSnippet;
    return this;
  }

  public MainInjectionQueryParameters addAttributesToSnippet(String attributesToSnippetItem) {
    if (this.attributesToSnippet == null) {
      this.attributesToSnippet = new ArrayList<>();
    }
    this.attributesToSnippet.add(attributesToSnippetItem);
    return this;
  }

  /**
   * Attributes for which to enable snippets. Attribute names are case-sensitive Snippets provide
   * additional context to matched words. If you enable snippets, they include 10 words, including
   * the matched word. The matched word will also be wrapped by HTML tags for highlighting. You can
   * adjust the number of words with the following notation: `ATTRIBUTE:NUMBER`, where `NUMBER` is
   * the number of words to be extracted.
   */
  @javax.annotation.Nullable
  public List<String> getAttributesToSnippet() {
    return attributesToSnippet;
  }

  public MainInjectionQueryParameters setClickAnalytics(Boolean clickAnalytics) {
    this.clickAnalytics = clickAnalytics;
    return this;
  }

  /**
   * Whether to include a `queryID` attribute in the response The query ID is a unique identifier
   * for a search query and is required for tracking [click and conversion
   * events](https://www.algolia.com/doc/guides/sending-events/getting-started).
   */
  @javax.annotation.Nullable
  public Boolean getClickAnalytics() {
    return clickAnalytics;
  }

  public MainInjectionQueryParameters setDecompoundQuery(Boolean decompoundQuery) {
    this.decompoundQuery = decompoundQuery;
    return this;
  }

  /**
   * Whether to split compound words in the query into their building blocks For more information,
   * see [Word
   * segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words).
   * Word segmentation is supported for these languages: German, Dutch, Finnish, Swedish, and
   * Norwegian. Decompounding doesn't work for words with [non-spacing mark Unicode
   * characters](https://www.charactercodes.net/category/non-spacing_mark). For example,
   * `Gartenstühle` won't be decompounded if the `ü` consists of `u` (U+0075) and `◌̈` (U+0308).
   */
  @javax.annotation.Nullable
  public Boolean getDecompoundQuery() {
    return decompoundQuery;
  }

  public MainInjectionQueryParameters setDisableExactOnAttributes(List<String> disableExactOnAttributes) {
    this.disableExactOnAttributes = disableExactOnAttributes;
    return this;
  }

  public MainInjectionQueryParameters addDisableExactOnAttributes(String disableExactOnAttributesItem) {
    if (this.disableExactOnAttributes == null) {
      this.disableExactOnAttributes = new ArrayList<>();
    }
    this.disableExactOnAttributes.add(disableExactOnAttributesItem);
    return this;
  }

  /**
   * Searchable attributes for which you want to [turn off the Exact ranking
   * criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).
   * Attribute names are case-sensitive This can be useful for attributes with long values, where
   * the likelihood of an exact match is high, such as product descriptions. Turning off the Exact
   * ranking criterion for these attributes favors exact matching on other attributes. This reduces
   * the impact of individual attributes with a lot of content on ranking.
   */
  @javax.annotation.Nullable
  public List<String> getDisableExactOnAttributes() {
    return disableExactOnAttributes;
  }

  public MainInjectionQueryParameters setDisableTypoToleranceOnAttributes(List<String> disableTypoToleranceOnAttributes) {
    this.disableTypoToleranceOnAttributes = disableTypoToleranceOnAttributes;
    return this;
  }

  public MainInjectionQueryParameters addDisableTypoToleranceOnAttributes(String disableTypoToleranceOnAttributesItem) {
    if (this.disableTypoToleranceOnAttributes == null) {
      this.disableTypoToleranceOnAttributes = new ArrayList<>();
    }
    this.disableTypoToleranceOnAttributes.add(disableTypoToleranceOnAttributesItem);
    return this;
  }

  /**
   * Attributes for which you want to turn off [typo
   * tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance).
   * Attribute names are case-sensitive Returning only exact matches can help when - [Searching in
   * hyphenated
   * attributes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes).
   * - Reducing the number of matches when you have too many. This can happen with attributes that
   * are long blocks of text, such as product descriptions Consider alternatives such as
   * `disableTypoToleranceOnWords` or adding synonyms if your attributes have intentional unusual
   * spellings that might look like typos.
   */
  @javax.annotation.Nullable
  public List<String> getDisableTypoToleranceOnAttributes() {
    return disableTypoToleranceOnAttributes;
  }

  public MainInjectionQueryParameters setDistinct(Distinct distinct) {
    this.distinct = distinct;
    return this;
  }

  /** Get distinct */
  @javax.annotation.Nullable
  public Distinct getDistinct() {
    return distinct;
  }

  public MainInjectionQueryParameters setEnableABTest(Boolean enableABTest) {
    this.enableABTest = enableABTest;
    return this;
  }

  /** Whether to enable A/B testing for this search. */
  @javax.annotation.Nullable
  public Boolean getEnableABTest() {
    return enableABTest;
  }

  public MainInjectionQueryParameters setEnablePersonalization(Boolean enablePersonalization) {
    this.enablePersonalization = enablePersonalization;
    return this;
  }

  /** Whether to enable Personalization. */
  @javax.annotation.Nullable
  public Boolean getEnablePersonalization() {
    return enablePersonalization;
  }

  public MainInjectionQueryParameters setEnableReRanking(Boolean enableReRanking) {
    this.enableReRanking = enableReRanking;
    return this;
  }

  /**
   * Whether this search will use [Dynamic
   * Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking) This setting only has an
   * effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard.
   */
  @javax.annotation.Nullable
  public Boolean getEnableReRanking() {
    return enableReRanking;
  }

  public MainInjectionQueryParameters setEnableRules(Boolean enableRules) {
    this.enableRules = enableRules;
    return this;
  }

  /** Whether to enable rules. */
  @javax.annotation.Nullable
  public Boolean getEnableRules() {
    return enableRules;
  }

  public MainInjectionQueryParameters setExactOnSingleWordQuery(ExactOnSingleWordQuery exactOnSingleWordQuery) {
    this.exactOnSingleWordQuery = exactOnSingleWordQuery;
    return this;
  }

  /** Get exactOnSingleWordQuery */
  @javax.annotation.Nullable
  public ExactOnSingleWordQuery getExactOnSingleWordQuery() {
    return exactOnSingleWordQuery;
  }

  public MainInjectionQueryParameters setFacetFilters(FacetFilters facetFilters) {
    this.facetFilters = facetFilters;
    return this;
  }

  /** Get facetFilters */
  @javax.annotation.Nullable
  public FacetFilters getFacetFilters() {
    return facetFilters;
  }

  public MainInjectionQueryParameters setFilters(String filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Filter expression to only include items that match the filter criteria in the response. You can
   * use these filter expressions: - **Numeric filters.** `<facet> <op> <number>`, where `<op>` is
   * one of `<`, `<=`, `=`, `!=`, `>`, `>=`. - **Ranges.** `<facet>:<lower> TO <upper>` where
   * `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive). - **Facet
   * filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and
   * `<value>` a facet value. - **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).
   * - **Boolean filters.** `<facet>: true | false`. You can combine filters with `AND`, `OR`, and
   * `NOT` operators with the following restrictions: - You can only combine filters of the same
   * type with `OR`. **Not supported:** `facet:value OR num > 3`. - You can't use `NOT` with
   * combinations of filters. **Not supported:** `NOT(facet:value OR facet:value)` - You can't
   * combine conjunctions (`AND`) with `OR`. **Not supported:** `facet:value OR (facet:value AND
   * facet:value)` Use quotes around your filters, if the facet attribute name or facet value has
   * spaces, keywords (`OR`, `AND`, `NOT`), or quotes. If a facet attribute is an array, the filter
   * matches if it matches at least one element of the array. For more information, see
   * [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering).
   */
  @javax.annotation.Nullable
  public String getFilters() {
    return filters;
  }

  public MainInjectionQueryParameters setGetRankingInfo(Boolean getRankingInfo) {
    this.getRankingInfo = getRankingInfo;
    return this;
  }

  /** Whether the search response should include detailed ranking information. */
  @javax.annotation.Nullable
  public Boolean getGetRankingInfo() {
    return getRankingInfo;
  }

  public MainInjectionQueryParameters setHighlightPostTag(String highlightPostTag) {
    this.highlightPostTag = highlightPostTag;
    return this;
  }

  /** HTML tag to insert after the highlighted parts in all highlighted results and snippets. */
  @javax.annotation.Nullable
  public String getHighlightPostTag() {
    return highlightPostTag;
  }

  public MainInjectionQueryParameters setHighlightPreTag(String highlightPreTag) {
    this.highlightPreTag = highlightPreTag;
    return this;
  }

  /** HTML tag to insert before the highlighted parts in all highlighted results and snippets. */
  @javax.annotation.Nullable
  public String getHighlightPreTag() {
    return highlightPreTag;
  }

  public MainInjectionQueryParameters setIgnorePlurals(IgnorePlurals ignorePlurals) {
    this.ignorePlurals = ignorePlurals;
    return this;
  }

  /** Get ignorePlurals */
  @javax.annotation.Nullable
  public IgnorePlurals getIgnorePlurals() {
    return ignorePlurals;
  }

  public MainInjectionQueryParameters setMaxFacetHits(Integer maxFacetHits) {
    this.maxFacetHits = maxFacetHits;
    return this;
  }

  /**
   * Maximum number of facet values to return when [searching for facet
   * values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
   * maximum: 100
   */
  @javax.annotation.Nullable
  public Integer getMaxFacetHits() {
    return maxFacetHits;
  }

  public MainInjectionQueryParameters setMinProximity(Integer minProximity) {
    this.minProximity = minProximity;
    return this;
  }

  /**
   * Minimum proximity score for two matching words This adjusts the [Proximity ranking
   * criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity)
   * by equally scoring matches that are farther apart For example, if `minProximity` is 2,
   * neighboring matches and matches with one word between them would have the same score. minimum:
   * 1 maximum: 7
   */
  @javax.annotation.Nullable
  public Integer getMinProximity() {
    return minProximity;
  }

  public MainInjectionQueryParameters setMinWordSizefor1Typo(Integer minWordSizefor1Typo) {
    this.minWordSizefor1Typo = minWordSizefor1Typo;
    return this;
  }

  /**
   * Minimum number of characters a word in the search query must contain to accept matches with
   * [one
   * typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
   */
  @javax.annotation.Nullable
  public Integer getMinWordSizefor1Typo() {
    return minWordSizefor1Typo;
  }

  public MainInjectionQueryParameters setMinWordSizefor2Typos(Integer minWordSizefor2Typos) {
    this.minWordSizefor2Typos = minWordSizefor2Typos;
    return this;
  }

  /**
   * Minimum number of characters a word in the search query must contain to accept matches with
   * [two
   * typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
   */
  @javax.annotation.Nullable
  public Integer getMinWordSizefor2Typos() {
    return minWordSizefor2Typos;
  }

  public MainInjectionQueryParameters setNaturalLanguages(List<SupportedLanguage> naturalLanguages) {
    this.naturalLanguages = naturalLanguages;
    return this;
  }

  public MainInjectionQueryParameters addNaturalLanguages(SupportedLanguage naturalLanguagesItem) {
    if (this.naturalLanguages == null) {
      this.naturalLanguages = new ArrayList<>();
    }
    this.naturalLanguages.add(naturalLanguagesItem);
    return this;
  }

  /**
   * ISO language codes that adjust settings that are useful for processing natural language queries
   * (as opposed to keyword searches) - Sets `removeStopWords` and `ignorePlurals` to the list of
   * provided languages. - Sets `removeWordsIfNoResults` to `allOptional`. - Adds a
   * `natural_language` attribute to `ruleContexts` and `analyticsTags`.
   */
  @javax.annotation.Nullable
  public List<SupportedLanguage> getNaturalLanguages() {
    return naturalLanguages;
  }

  public MainInjectionQueryParameters setNumericFilters(NumericFilters numericFilters) {
    this.numericFilters = numericFilters;
    return this;
  }

  /** Get numericFilters */
  @javax.annotation.Nullable
  public NumericFilters getNumericFilters() {
    return numericFilters;
  }

  public MainInjectionQueryParameters setOptionalFilters(OptionalFilters optionalFilters) {
    this.optionalFilters = optionalFilters;
    return this;
  }

  /** Get optionalFilters */
  @javax.annotation.Nullable
  public OptionalFilters getOptionalFilters() {
    return optionalFilters;
  }

  public MainInjectionQueryParameters setOptionalWords(OptionalWords optionalWords) {
    this.optionalWords = optionalWords;
    return this;
  }

  /** Get optionalWords */
  @javax.annotation.Nullable
  public OptionalWords getOptionalWords() {
    return optionalWords;
  }

  public MainInjectionQueryParameters setPercentileComputation(Boolean percentileComputation) {
    this.percentileComputation = percentileComputation;
    return this;
  }

  /** Whether to include this search when calculating processing-time percentiles. */
  @javax.annotation.Nullable
  public Boolean getPercentileComputation() {
    return percentileComputation;
  }

  public MainInjectionQueryParameters setPersonalizationImpact(Integer personalizationImpact) {
    this.personalizationImpact = personalizationImpact;
    return this;
  }

  /**
   * Impact that Personalization should have on this search The higher this value is, the more
   * Personalization determines the ranking compared to other factors. For more information, see
   * [Understanding Personalization
   * impact](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).
   * minimum: 0 maximum: 100
   */
  @javax.annotation.Nullable
  public Integer getPersonalizationImpact() {
    return personalizationImpact;
  }

  public MainInjectionQueryParameters setQueryLanguages(List<SupportedLanguage> queryLanguages) {
    this.queryLanguages = queryLanguages;
    return this;
  }

  public MainInjectionQueryParameters addQueryLanguages(SupportedLanguage queryLanguagesItem) {
    if (this.queryLanguages == null) {
      this.queryLanguages = new ArrayList<>();
    }
    this.queryLanguages.add(queryLanguagesItem);
    return this;
  }

  /**
   * Languages for language-specific query processing steps such as plurals, stop-word removal, and
   * word-detection dictionaries This setting sets a default list of languages used by the
   * `removeStopWords` and `ignorePlurals` settings. This setting also sets a dictionary for word
   * detection in the logogram-based
   * [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk)
   * languages. To support this, you must place the CJK language **first** **You should always
   * specify a query language.** If you don't specify an indexing language, the search engine uses
   * all [supported
   * languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages),
   * or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This
   * can lead to unexpected search results. For more information, see [Language-specific
   * configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations).
   */
  @javax.annotation.Nullable
  public List<SupportedLanguage> getQueryLanguages() {
    return queryLanguages;
  }

  public MainInjectionQueryParameters setQueryType(QueryType queryType) {
    this.queryType = queryType;
    return this;
  }

  /** Get queryType */
  @javax.annotation.Nullable
  public QueryType getQueryType() {
    return queryType;
  }

  public MainInjectionQueryParameters setRemoveStopWords(RemoveStopWords removeStopWords) {
    this.removeStopWords = removeStopWords;
    return this;
  }

  /** Get removeStopWords */
  @javax.annotation.Nullable
  public RemoveStopWords getRemoveStopWords() {
    return removeStopWords;
  }

  public MainInjectionQueryParameters setRemoveWordsIfNoResults(RemoveWordsIfNoResults removeWordsIfNoResults) {
    this.removeWordsIfNoResults = removeWordsIfNoResults;
    return this;
  }

  /** Get removeWordsIfNoResults */
  @javax.annotation.Nullable
  public RemoveWordsIfNoResults getRemoveWordsIfNoResults() {
    return removeWordsIfNoResults;
  }

  public MainInjectionQueryParameters setReplaceSynonymsInHighlight(Boolean replaceSynonymsInHighlight) {
    this.replaceSynonymsInHighlight = replaceSynonymsInHighlight;
    return this;
  }

  /**
   * Whether to replace a highlighted word with the matched synonym By default, the original words
   * are highlighted even if a synonym matches. For example, with `home` as a synonym for `house`
   * and a search for `home`, records matching either \"home\" or \"house\" are included in the
   * search results, and either \"home\" or \"house\" are highlighted With
   * `replaceSynonymsInHighlight` set to `true`, a search for `home` still matches the same records,
   * but all occurrences of \"house\" are replaced by \"home\" in the highlighted response.
   */
  @javax.annotation.Nullable
  public Boolean getReplaceSynonymsInHighlight() {
    return replaceSynonymsInHighlight;
  }

  public MainInjectionQueryParameters setResponseFields(List<String> responseFields) {
    this.responseFields = responseFields;
    return this;
  }

  public MainInjectionQueryParameters addResponseFields(String responseFieldsItem) {
    if (this.responseFields == null) {
      this.responseFields = new ArrayList<>();
    }
    this.responseFields.add(responseFieldsItem);
    return this;
  }

  /**
   * Properties to include in the API response of search and browse requests By default, all
   * response properties are included. To reduce the response size, you can select which properties
   * should be included An empty list may lead to an empty API response (except properties you can't
   * exclude) You can't exclude these properties: `message`, `warning`, `cursor`, `abTestVariantID`,
   * or any property added by setting `getRankingInfo` to true Your search depends on the `hits`
   * field. If you omit this field, searches won't return any results. Your UI might also depend on
   * other properties, for example, for pagination. Before restricting the response size, check the
   * impact on your search experience.
   */
  @javax.annotation.Nullable
  public List<String> getResponseFields() {
    return responseFields;
  }

  public MainInjectionQueryParameters setRestrictHighlightAndSnippetArrays(Boolean restrictHighlightAndSnippetArrays) {
    this.restrictHighlightAndSnippetArrays = restrictHighlightAndSnippetArrays;
    return this;
  }

  /**
   * Whether to restrict highlighting and snippeting to items that at least partially matched the
   * search query. By default, all items are highlighted and snippeted.
   */
  @javax.annotation.Nullable
  public Boolean getRestrictHighlightAndSnippetArrays() {
    return restrictHighlightAndSnippetArrays;
  }

  public MainInjectionQueryParameters setRestrictSearchableAttributes(List<String> restrictSearchableAttributes) {
    this.restrictSearchableAttributes = restrictSearchableAttributes;
    return this;
  }

  public MainInjectionQueryParameters addRestrictSearchableAttributes(String restrictSearchableAttributesItem) {
    if (this.restrictSearchableAttributes == null) {
      this.restrictSearchableAttributes = new ArrayList<>();
    }
    this.restrictSearchableAttributes.add(restrictSearchableAttributesItem);
    return this;
  }

  /**
   * Restricts a search to a subset of your searchable attributes. Attribute names are
   * case-sensitive.
   */
  @javax.annotation.Nullable
  public List<String> getRestrictSearchableAttributes() {
    return restrictSearchableAttributes;
  }

  public MainInjectionQueryParameters setRuleContexts(List<String> ruleContexts) {
    this.ruleContexts = ruleContexts;
    return this;
  }

  public MainInjectionQueryParameters addRuleContexts(String ruleContextsItem) {
    if (this.ruleContexts == null) {
      this.ruleContexts = new ArrayList<>();
    }
    this.ruleContexts.add(ruleContextsItem);
    return this;
  }

  /**
   * Assigns a rule context to the search query [Rule
   * contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context)
   * are strings that you can use to trigger matching rules.
   */
  @javax.annotation.Nullable
  public List<String> getRuleContexts() {
    return ruleContexts;
  }

  public MainInjectionQueryParameters setSnippetEllipsisText(String snippetEllipsisText) {
    this.snippetEllipsisText = snippetEllipsisText;
    return this;
  }

  /** String used as an ellipsis indicator when a snippet is truncated. */
  @javax.annotation.Nullable
  public String getSnippetEllipsisText() {
    return snippetEllipsisText;
  }

  public MainInjectionQueryParameters setSynonyms(Boolean synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  /** Whether to take into account an index's synonyms for this search. */
  @javax.annotation.Nullable
  public Boolean getSynonyms() {
    return synonyms;
  }

  public MainInjectionQueryParameters setTypoTolerance(TypoTolerance typoTolerance) {
    this.typoTolerance = typoTolerance;
    return this;
  }

  /** Get typoTolerance */
  @javax.annotation.Nullable
  public TypoTolerance getTypoTolerance() {
    return typoTolerance;
  }

  public MainInjectionQueryParameters setFacetingAfterDistinct(Boolean facetingAfterDistinct) {
    this.facetingAfterDistinct = facetingAfterDistinct;
    return this;
  }

  /**
   * Whether faceting should be applied after deduplication with `distinct` This leads to accurate
   * facet counts when using faceting in combination with `distinct`. It's usually better to use
   * `afterDistinct` modifiers in the `attributesForFaceting` setting, as `facetingAfterDistinct`
   * only computes correct facet counts if all records have the same facet values for the
   * `attributeForDistinct`.
   */
  @javax.annotation.Nullable
  public Boolean getFacetingAfterDistinct() {
    return facetingAfterDistinct;
  }

  public MainInjectionQueryParameters setFacets(List<String> facets) {
    this.facets = facets;
    return this;
  }

  public MainInjectionQueryParameters addFacets(String facetsItem) {
    if (this.facets == null) {
      this.facets = new ArrayList<>();
    }
    this.facets.add(facetsItem);
    return this;
  }

  /**
   * Facets for which to retrieve facet values that match the search criteria and the number of
   * matching facet values To retrieve all facets, use the wildcard character `*`. To retrieve
   * disjunctive facets lists, annotate any facets with the `disjunctive` modifier. For more
   * information, see
   * [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts)
   * and [disjunctive faceting for Smart
   * Groups](https://www.algolia.com/doc/guides/managing-results/compositions/search-based-groups#facets-including-disjunctive-faceting).
   */
  @javax.annotation.Nullable
  public List<String> getFacets() {
    return facets;
  }

  public MainInjectionQueryParameters setHitsPerPage(Integer hitsPerPage) {
    this.hitsPerPage = hitsPerPage;
    return this;
  }

  /** Number of hits per page. minimum: 1 maximum: 1000 */
  @javax.annotation.Nullable
  public Integer getHitsPerPage() {
    return hitsPerPage;
  }

  public MainInjectionQueryParameters setMaxValuesPerFacet(Integer maxValuesPerFacet) {
    this.maxValuesPerFacet = maxValuesPerFacet;
    return this;
  }

  /** Maximum number of facet values to return for each facet. maximum: 1000 */
  @javax.annotation.Nullable
  public Integer getMaxValuesPerFacet() {
    return maxValuesPerFacet;
  }

  public MainInjectionQueryParameters setRenderingContent(RenderingContent renderingContent) {
    this.renderingContent = renderingContent;
    return this;
  }

  /** Get renderingContent */
  @javax.annotation.Nullable
  public RenderingContent getRenderingContent() {
    return renderingContent;
  }

  public MainInjectionQueryParameters setSortFacetValuesBy(String sortFacetValuesBy) {
    this.sortFacetValuesBy = sortFacetValuesBy;
    return this;
  }

  /**
   * Order in which to retrieve facet values - `count`. Facet values are retrieved by decreasing
   * count. The count is the number of matching records containing this facet value - `alpha`.
   * Retrieve facet values alphabetically This setting doesn't influence how facet values are
   * displayed in your UI (see `renderingContent`). For more information, see [facet value
   * display](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/facet-display/js).
   */
  @javax.annotation.Nullable
  public String getSortFacetValuesBy() {
    return sortFacetValuesBy;
  }

  public MainInjectionQueryParameters setSumOrFiltersScores(Boolean sumOrFiltersScores) {
    this.sumOrFiltersScores = sumOrFiltersScores;
    return this;
  }

  /**
   * Whether to sum all filter scores If true, all filter scores are summed. Otherwise, the maximum
   * filter score is kept. For more information, see [filter
   * scores](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/in-depth/filter-scoring/#accumulating-scores-with-sumorfiltersscores).
   */
  @javax.annotation.Nullable
  public Boolean getSumOrFiltersScores() {
    return sumOrFiltersScores;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MainInjectionQueryParameters mainInjectionQueryParameters = (MainInjectionQueryParameters) o;
    return (
      Objects.equals(this.advancedSyntax, mainInjectionQueryParameters.advancedSyntax) &&
      Objects.equals(this.advancedSyntaxFeatures, mainInjectionQueryParameters.advancedSyntaxFeatures) &&
      Objects.equals(this.allowTyposOnNumericTokens, mainInjectionQueryParameters.allowTyposOnNumericTokens) &&
      Objects.equals(this.alternativesAsExact, mainInjectionQueryParameters.alternativesAsExact) &&
      Objects.equals(this.analytics, mainInjectionQueryParameters.analytics) &&
      Objects.equals(this.attributeCriteriaComputedByMinProximity, mainInjectionQueryParameters.attributeCriteriaComputedByMinProximity) &&
      Objects.equals(this.attributesToHighlight, mainInjectionQueryParameters.attributesToHighlight) &&
      Objects.equals(this.attributesToRetrieve, mainInjectionQueryParameters.attributesToRetrieve) &&
      Objects.equals(this.attributesToSnippet, mainInjectionQueryParameters.attributesToSnippet) &&
      Objects.equals(this.clickAnalytics, mainInjectionQueryParameters.clickAnalytics) &&
      Objects.equals(this.decompoundQuery, mainInjectionQueryParameters.decompoundQuery) &&
      Objects.equals(this.disableExactOnAttributes, mainInjectionQueryParameters.disableExactOnAttributes) &&
      Objects.equals(this.disableTypoToleranceOnAttributes, mainInjectionQueryParameters.disableTypoToleranceOnAttributes) &&
      Objects.equals(this.distinct, mainInjectionQueryParameters.distinct) &&
      Objects.equals(this.enableABTest, mainInjectionQueryParameters.enableABTest) &&
      Objects.equals(this.enablePersonalization, mainInjectionQueryParameters.enablePersonalization) &&
      Objects.equals(this.enableReRanking, mainInjectionQueryParameters.enableReRanking) &&
      Objects.equals(this.enableRules, mainInjectionQueryParameters.enableRules) &&
      Objects.equals(this.exactOnSingleWordQuery, mainInjectionQueryParameters.exactOnSingleWordQuery) &&
      Objects.equals(this.facetFilters, mainInjectionQueryParameters.facetFilters) &&
      Objects.equals(this.filters, mainInjectionQueryParameters.filters) &&
      Objects.equals(this.getRankingInfo, mainInjectionQueryParameters.getRankingInfo) &&
      Objects.equals(this.highlightPostTag, mainInjectionQueryParameters.highlightPostTag) &&
      Objects.equals(this.highlightPreTag, mainInjectionQueryParameters.highlightPreTag) &&
      Objects.equals(this.ignorePlurals, mainInjectionQueryParameters.ignorePlurals) &&
      Objects.equals(this.maxFacetHits, mainInjectionQueryParameters.maxFacetHits) &&
      Objects.equals(this.minProximity, mainInjectionQueryParameters.minProximity) &&
      Objects.equals(this.minWordSizefor1Typo, mainInjectionQueryParameters.minWordSizefor1Typo) &&
      Objects.equals(this.minWordSizefor2Typos, mainInjectionQueryParameters.minWordSizefor2Typos) &&
      Objects.equals(this.naturalLanguages, mainInjectionQueryParameters.naturalLanguages) &&
      Objects.equals(this.numericFilters, mainInjectionQueryParameters.numericFilters) &&
      Objects.equals(this.optionalFilters, mainInjectionQueryParameters.optionalFilters) &&
      Objects.equals(this.optionalWords, mainInjectionQueryParameters.optionalWords) &&
      Objects.equals(this.percentileComputation, mainInjectionQueryParameters.percentileComputation) &&
      Objects.equals(this.personalizationImpact, mainInjectionQueryParameters.personalizationImpact) &&
      Objects.equals(this.queryLanguages, mainInjectionQueryParameters.queryLanguages) &&
      Objects.equals(this.queryType, mainInjectionQueryParameters.queryType) &&
      Objects.equals(this.removeStopWords, mainInjectionQueryParameters.removeStopWords) &&
      Objects.equals(this.removeWordsIfNoResults, mainInjectionQueryParameters.removeWordsIfNoResults) &&
      Objects.equals(this.replaceSynonymsInHighlight, mainInjectionQueryParameters.replaceSynonymsInHighlight) &&
      Objects.equals(this.responseFields, mainInjectionQueryParameters.responseFields) &&
      Objects.equals(this.restrictHighlightAndSnippetArrays, mainInjectionQueryParameters.restrictHighlightAndSnippetArrays) &&
      Objects.equals(this.restrictSearchableAttributes, mainInjectionQueryParameters.restrictSearchableAttributes) &&
      Objects.equals(this.ruleContexts, mainInjectionQueryParameters.ruleContexts) &&
      Objects.equals(this.snippetEllipsisText, mainInjectionQueryParameters.snippetEllipsisText) &&
      Objects.equals(this.synonyms, mainInjectionQueryParameters.synonyms) &&
      Objects.equals(this.typoTolerance, mainInjectionQueryParameters.typoTolerance) &&
      Objects.equals(this.facetingAfterDistinct, mainInjectionQueryParameters.facetingAfterDistinct) &&
      Objects.equals(this.facets, mainInjectionQueryParameters.facets) &&
      Objects.equals(this.hitsPerPage, mainInjectionQueryParameters.hitsPerPage) &&
      Objects.equals(this.maxValuesPerFacet, mainInjectionQueryParameters.maxValuesPerFacet) &&
      Objects.equals(this.renderingContent, mainInjectionQueryParameters.renderingContent) &&
      Objects.equals(this.sortFacetValuesBy, mainInjectionQueryParameters.sortFacetValuesBy) &&
      Objects.equals(this.sumOrFiltersScores, mainInjectionQueryParameters.sumOrFiltersScores)
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      advancedSyntax,
      advancedSyntaxFeatures,
      allowTyposOnNumericTokens,
      alternativesAsExact,
      analytics,
      attributeCriteriaComputedByMinProximity,
      attributesToHighlight,
      attributesToRetrieve,
      attributesToSnippet,
      clickAnalytics,
      decompoundQuery,
      disableExactOnAttributes,
      disableTypoToleranceOnAttributes,
      distinct,
      enableABTest,
      enablePersonalization,
      enableReRanking,
      enableRules,
      exactOnSingleWordQuery,
      facetFilters,
      filters,
      getRankingInfo,
      highlightPostTag,
      highlightPreTag,
      ignorePlurals,
      maxFacetHits,
      minProximity,
      minWordSizefor1Typo,
      minWordSizefor2Typos,
      naturalLanguages,
      numericFilters,
      optionalFilters,
      optionalWords,
      percentileComputation,
      personalizationImpact,
      queryLanguages,
      queryType,
      removeStopWords,
      removeWordsIfNoResults,
      replaceSynonymsInHighlight,
      responseFields,
      restrictHighlightAndSnippetArrays,
      restrictSearchableAttributes,
      ruleContexts,
      snippetEllipsisText,
      synonyms,
      typoTolerance,
      facetingAfterDistinct,
      facets,
      hitsPerPage,
      maxValuesPerFacet,
      renderingContent,
      sortFacetValuesBy,
      sumOrFiltersScores
    );
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MainInjectionQueryParameters {\n");
    sb.append("    advancedSyntax: ").append(toIndentedString(advancedSyntax)).append("\n");
    sb.append("    advancedSyntaxFeatures: ").append(toIndentedString(advancedSyntaxFeatures)).append("\n");
    sb.append("    allowTyposOnNumericTokens: ").append(toIndentedString(allowTyposOnNumericTokens)).append("\n");
    sb.append("    alternativesAsExact: ").append(toIndentedString(alternativesAsExact)).append("\n");
    sb.append("    analytics: ").append(toIndentedString(analytics)).append("\n");
    sb
      .append("    attributeCriteriaComputedByMinProximity: ")
      .append(toIndentedString(attributeCriteriaComputedByMinProximity))
      .append("\n");
    sb.append("    attributesToHighlight: ").append(toIndentedString(attributesToHighlight)).append("\n");
    sb.append("    attributesToRetrieve: ").append(toIndentedString(attributesToRetrieve)).append("\n");
    sb.append("    attributesToSnippet: ").append(toIndentedString(attributesToSnippet)).append("\n");
    sb.append("    clickAnalytics: ").append(toIndentedString(clickAnalytics)).append("\n");
    sb.append("    decompoundQuery: ").append(toIndentedString(decompoundQuery)).append("\n");
    sb.append("    disableExactOnAttributes: ").append(toIndentedString(disableExactOnAttributes)).append("\n");
    sb.append("    disableTypoToleranceOnAttributes: ").append(toIndentedString(disableTypoToleranceOnAttributes)).append("\n");
    sb.append("    distinct: ").append(toIndentedString(distinct)).append("\n");
    sb.append("    enableABTest: ").append(toIndentedString(enableABTest)).append("\n");
    sb.append("    enablePersonalization: ").append(toIndentedString(enablePersonalization)).append("\n");
    sb.append("    enableReRanking: ").append(toIndentedString(enableReRanking)).append("\n");
    sb.append("    enableRules: ").append(toIndentedString(enableRules)).append("\n");
    sb.append("    exactOnSingleWordQuery: ").append(toIndentedString(exactOnSingleWordQuery)).append("\n");
    sb.append("    facetFilters: ").append(toIndentedString(facetFilters)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    getRankingInfo: ").append(toIndentedString(getRankingInfo)).append("\n");
    sb.append("    highlightPostTag: ").append(toIndentedString(highlightPostTag)).append("\n");
    sb.append("    highlightPreTag: ").append(toIndentedString(highlightPreTag)).append("\n");
    sb.append("    ignorePlurals: ").append(toIndentedString(ignorePlurals)).append("\n");
    sb.append("    maxFacetHits: ").append(toIndentedString(maxFacetHits)).append("\n");
    sb.append("    minProximity: ").append(toIndentedString(minProximity)).append("\n");
    sb.append("    minWordSizefor1Typo: ").append(toIndentedString(minWordSizefor1Typo)).append("\n");
    sb.append("    minWordSizefor2Typos: ").append(toIndentedString(minWordSizefor2Typos)).append("\n");
    sb.append("    naturalLanguages: ").append(toIndentedString(naturalLanguages)).append("\n");
    sb.append("    numericFilters: ").append(toIndentedString(numericFilters)).append("\n");
    sb.append("    optionalFilters: ").append(toIndentedString(optionalFilters)).append("\n");
    sb.append("    optionalWords: ").append(toIndentedString(optionalWords)).append("\n");
    sb.append("    percentileComputation: ").append(toIndentedString(percentileComputation)).append("\n");
    sb.append("    personalizationImpact: ").append(toIndentedString(personalizationImpact)).append("\n");
    sb.append("    queryLanguages: ").append(toIndentedString(queryLanguages)).append("\n");
    sb.append("    queryType: ").append(toIndentedString(queryType)).append("\n");
    sb.append("    removeStopWords: ").append(toIndentedString(removeStopWords)).append("\n");
    sb.append("    removeWordsIfNoResults: ").append(toIndentedString(removeWordsIfNoResults)).append("\n");
    sb.append("    replaceSynonymsInHighlight: ").append(toIndentedString(replaceSynonymsInHighlight)).append("\n");
    sb.append("    responseFields: ").append(toIndentedString(responseFields)).append("\n");
    sb.append("    restrictHighlightAndSnippetArrays: ").append(toIndentedString(restrictHighlightAndSnippetArrays)).append("\n");
    sb.append("    restrictSearchableAttributes: ").append(toIndentedString(restrictSearchableAttributes)).append("\n");
    sb.append("    ruleContexts: ").append(toIndentedString(ruleContexts)).append("\n");
    sb.append("    snippetEllipsisText: ").append(toIndentedString(snippetEllipsisText)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    typoTolerance: ").append(toIndentedString(typoTolerance)).append("\n");
    sb.append("    facetingAfterDistinct: ").append(toIndentedString(facetingAfterDistinct)).append("\n");
    sb.append("    facets: ").append(toIndentedString(facets)).append("\n");
    sb.append("    hitsPerPage: ").append(toIndentedString(hitsPerPage)).append("\n");
    sb.append("    maxValuesPerFacet: ").append(toIndentedString(maxValuesPerFacet)).append("\n");
    sb.append("    renderingContent: ").append(toIndentedString(renderingContent)).append("\n");
    sb.append("    sortFacetValuesBy: ").append(toIndentedString(sortFacetValuesBy)).append("\n");
    sb.append("    sumOrFiltersScores: ").append(toIndentedString(sumOrFiltersScores)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
