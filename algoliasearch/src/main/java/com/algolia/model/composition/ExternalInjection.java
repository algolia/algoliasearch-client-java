// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.composition;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/** ExternalInjection */
public class ExternalInjection {

  @JsonProperty("objectID")
  private String objectID;

  @JsonProperty("metadata")
  private Map<String, Object> metadata;

  public ExternalInjection setObjectID(String objectID) {
    this.objectID = objectID;
    return this;
  }

  /** An objectID injected into an external source. */
  @javax.annotation.Nonnull
  public String getObjectID() {
    return objectID;
  }

  public ExternalInjection setMetadata(Map<String, Object> metadata) {
    this.metadata = metadata;
    return this;
  }

  public ExternalInjection putMetadata(String key, Object metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * User-defined key-values that will be added to the injected item in the response. This is
   * identical to Hits metadata defined in Composition or Composition Rule, with the benefit of
   * being set at runtime.
   */
  @javax.annotation.Nullable
  public Map<String, Object> getMetadata() {
    return metadata;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalInjection externalInjection = (ExternalInjection) o;
    return Objects.equals(this.objectID, externalInjection.objectID) && Objects.equals(this.metadata, externalInjection.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectID, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalInjection {\n");
    sb.append("    objectID: ").append(toIndentedString(objectID)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
