// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.ingestion;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.Objects;

/** SourceJSON */
@JsonDeserialize(as = SourceJSON.class)
public class SourceJSON implements SourceInput, SourceUpdateInput {

  @JsonProperty("url")
  private String url;

  @JsonProperty("uniqueIDColumn")
  private String uniqueIDColumn;

  @JsonProperty("method")
  private MethodType method;

  public SourceJSON setUrl(String url) {
    this.url = url;
    return this;
  }

  /** URL of the file. */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public SourceJSON setUniqueIDColumn(String uniqueIDColumn) {
    this.uniqueIDColumn = uniqueIDColumn;
    return this;
  }

  /** Name of a column that contains a unique ID which will be used as `objectID` in Algolia. */
  @javax.annotation.Nullable
  public String getUniqueIDColumn() {
    return uniqueIDColumn;
  }

  public SourceJSON setMethod(MethodType method) {
    this.method = method;
    return this;
  }

  /** Get method */
  @javax.annotation.Nullable
  public MethodType getMethod() {
    return method;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceJSON sourceJSON = (SourceJSON) o;
    return (
      Objects.equals(this.url, sourceJSON.url) &&
      Objects.equals(this.uniqueIDColumn, sourceJSON.uniqueIDColumn) &&
      Objects.equals(this.method, sourceJSON.method)
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, uniqueIDColumn, method);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceJSON {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    uniqueIDColumn: ").append(toIndentedString(uniqueIDColumn)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
