// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.ingestion;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.Objects;

/** Trigger input for scheduled tasks. */
@JsonDeserialize(as = ScheduleTriggerInput.class)
public class ScheduleTriggerInput implements TaskCreateTrigger {

  @JsonProperty("type")
  private ScheduleTriggerType type;

  @JsonProperty("cron")
  private String cron;

  public ScheduleTriggerInput setType(ScheduleTriggerType type) {
    this.type = type;
    return this;
  }

  /** Get type */
  @javax.annotation.Nonnull
  public ScheduleTriggerType getType() {
    return type;
  }

  public ScheduleTriggerInput setCron(String cron) {
    this.cron = cron;
    return this;
  }

  /** Cron expression for the task's schedule. */
  @javax.annotation.Nonnull
  public String getCron() {
    return cron;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduleTriggerInput scheduleTriggerInput = (ScheduleTriggerInput) o;
    return Objects.equals(this.type, scheduleTriggerInput.type) && Objects.equals(this.cron, scheduleTriggerInput.cron);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, cron);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduleTriggerInput {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    cron: ").append(toIndentedString(cron)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
