// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.ingestion;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.Objects;

/** Run */
public class Run {

  @JsonProperty("runID")
  private String runID;

  @JsonProperty("appID")
  private String appID;

  @JsonProperty("taskID")
  private String taskID;

  @JsonProperty("status")
  private RunStatus status;

  @JsonProperty("progress")
  private RunProgress progress;

  @JsonProperty("outcome")
  private RunOutcome outcome;

  @JsonProperty("failureThreshold")
  private Integer failureThreshold;

  @JsonProperty("reason")
  private String reason;

  @JsonProperty("reasonCode")
  private RunReasonCode reasonCode;

  @JsonProperty("type")
  private RunType type;

  @JsonProperty("createdAt")
  private String createdAt;

  @JsonProperty("startedAt")
  private String startedAt;

  @JsonProperty("finishedAt")
  private String finishedAt;

  public Run setRunID(String runID) {
    this.runID = runID;
    return this;
  }

  /** Universally unique identifier (UUID) of a task run. */
  @javax.annotation.Nonnull
  public String getRunID() {
    return runID;
  }

  public Run setAppID(String appID) {
    this.appID = appID;
    return this;
  }

  /** Get appID */
  @javax.annotation.Nonnull
  public String getAppID() {
    return appID;
  }

  public Run setTaskID(String taskID) {
    this.taskID = taskID;
    return this;
  }

  /** Universally unique identifier (UUID) of a task. */
  @javax.annotation.Nonnull
  public String getTaskID() {
    return taskID;
  }

  public Run setStatus(RunStatus status) {
    this.status = status;
    return this;
  }

  /** Get status */
  @javax.annotation.Nonnull
  public RunStatus getStatus() {
    return status;
  }

  public Run setProgress(RunProgress progress) {
    this.progress = progress;
    return this;
  }

  /** Get progress */
  @javax.annotation.Nullable
  public RunProgress getProgress() {
    return progress;
  }

  public Run setOutcome(RunOutcome outcome) {
    this.outcome = outcome;
    return this;
  }

  /** Get outcome */
  @javax.annotation.Nullable
  public RunOutcome getOutcome() {
    return outcome;
  }

  public Run setFailureThreshold(Integer failureThreshold) {
    this.failureThreshold = failureThreshold;
    return this;
  }

  /**
   * Maximum accepted percentage of failures for a task run to finish successfully. minimum: 0
   * maximum: 100
   */
  @javax.annotation.Nullable
  public Integer getFailureThreshold() {
    return failureThreshold;
  }

  public Run setReason(String reason) {
    this.reason = reason;
    return this;
  }

  /** More information about the task run's outcome. */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public Run setReasonCode(RunReasonCode reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /** Get reasonCode */
  @javax.annotation.Nullable
  public RunReasonCode getReasonCode() {
    return reasonCode;
  }

  public Run setType(RunType type) {
    this.type = type;
    return this;
  }

  /** Get type */
  @javax.annotation.Nonnull
  public RunType getType() {
    return type;
  }

  public Run setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /** Date of creation in RFC3339 format. */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public Run setStartedAt(String startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  /** Date of start in RFC3339 format. */
  @javax.annotation.Nullable
  public String getStartedAt() {
    return startedAt;
  }

  public Run setFinishedAt(String finishedAt) {
    this.finishedAt = finishedAt;
    return this;
  }

  /** Date of finish in RFC3339 format. */
  @javax.annotation.Nullable
  public String getFinishedAt() {
    return finishedAt;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Run run = (Run) o;
    return (
      Objects.equals(this.runID, run.runID) &&
      Objects.equals(this.appID, run.appID) &&
      Objects.equals(this.taskID, run.taskID) &&
      Objects.equals(this.status, run.status) &&
      Objects.equals(this.progress, run.progress) &&
      Objects.equals(this.outcome, run.outcome) &&
      Objects.equals(this.failureThreshold, run.failureThreshold) &&
      Objects.equals(this.reason, run.reason) &&
      Objects.equals(this.reasonCode, run.reasonCode) &&
      Objects.equals(this.type, run.type) &&
      Objects.equals(this.createdAt, run.createdAt) &&
      Objects.equals(this.startedAt, run.startedAt) &&
      Objects.equals(this.finishedAt, run.finishedAt)
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      runID,
      appID,
      taskID,
      status,
      progress,
      outcome,
      failureThreshold,
      reason,
      reasonCode,
      type,
      createdAt,
      startedAt,
      finishedAt
    );
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Run {\n");
    sb.append("    runID: ").append(toIndentedString(runID)).append("\n");
    sb.append("    appID: ").append(toIndentedString(appID)).append("\n");
    sb.append("    taskID: ").append(toIndentedString(taskID)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    failureThreshold: ").append(toIndentedString(failureThreshold)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
