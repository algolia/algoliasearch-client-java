// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.ingestion;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.Objects;

/** API request body for updating a task. */
public class TaskUpdate {

  @JsonProperty("destinationID")
  private String destinationID;

  @JsonProperty("cron")
  private String cron;

  @JsonProperty("input")
  private TaskInput input;

  @JsonProperty("enabled")
  private Boolean enabled;

  @JsonProperty("subscriptionAction")
  private ActionType subscriptionAction;

  @JsonProperty("failureThreshold")
  private Integer failureThreshold;

  @JsonProperty("notifications")
  private Notifications notifications;

  @JsonProperty("policies")
  private Policies policies;

  public TaskUpdate setDestinationID(String destinationID) {
    this.destinationID = destinationID;
    return this;
  }

  /** Universally unique identifier (UUID) of a destination resource. */
  @javax.annotation.Nullable
  public String getDestinationID() {
    return destinationID;
  }

  public TaskUpdate setCron(String cron) {
    this.cron = cron;
    return this;
  }

  /** Cron expression for the task's schedule. */
  @javax.annotation.Nullable
  public String getCron() {
    return cron;
  }

  public TaskUpdate setInput(TaskInput input) {
    this.input = input;
    return this;
  }

  /** Get input */
  @javax.annotation.Nullable
  public TaskInput getInput() {
    return input;
  }

  public TaskUpdate setEnabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /** Whether the task is enabled. */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public TaskUpdate setSubscriptionAction(ActionType subscriptionAction) {
    this.subscriptionAction = subscriptionAction;
    return this;
  }

  /** Get subscriptionAction */
  @javax.annotation.Nullable
  public ActionType getSubscriptionAction() {
    return subscriptionAction;
  }

  public TaskUpdate setFailureThreshold(Integer failureThreshold) {
    this.failureThreshold = failureThreshold;
    return this;
  }

  /**
   * Maximum accepted percentage of failures for a task run to finish successfully. minimum: 0
   * maximum: 100
   */
  @javax.annotation.Nullable
  public Integer getFailureThreshold() {
    return failureThreshold;
  }

  public TaskUpdate setNotifications(Notifications notifications) {
    this.notifications = notifications;
    return this;
  }

  /** Get notifications */
  @javax.annotation.Nullable
  public Notifications getNotifications() {
    return notifications;
  }

  public TaskUpdate setPolicies(Policies policies) {
    this.policies = policies;
    return this;
  }

  /** Get policies */
  @javax.annotation.Nullable
  public Policies getPolicies() {
    return policies;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskUpdate taskUpdate = (TaskUpdate) o;
    return (
      Objects.equals(this.destinationID, taskUpdate.destinationID) &&
      Objects.equals(this.cron, taskUpdate.cron) &&
      Objects.equals(this.input, taskUpdate.input) &&
      Objects.equals(this.enabled, taskUpdate.enabled) &&
      Objects.equals(this.subscriptionAction, taskUpdate.subscriptionAction) &&
      Objects.equals(this.failureThreshold, taskUpdate.failureThreshold) &&
      Objects.equals(this.notifications, taskUpdate.notifications) &&
      Objects.equals(this.policies, taskUpdate.policies)
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationID, cron, input, enabled, subscriptionAction, failureThreshold, notifications, policies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskUpdate {\n");
    sb.append("    destinationID: ").append(toIndentedString(destinationID)).append("\n");
    sb.append("    cron: ").append(toIndentedString(cron)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    subscriptionAction: ").append(toIndentedString(subscriptionAction)).append("\n");
    sb.append("    failureThreshold: ").append(toIndentedString(failureThreshold)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
