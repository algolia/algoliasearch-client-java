// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.ingestion;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.Objects;

/** SourceDocker */
@JsonDeserialize(as = SourceDocker.class)
public class SourceDocker implements SourceInput {

  @JsonProperty("image")
  private String image;

  @JsonProperty("configuration")
  private Object configuration;

  public SourceDocker setImage(String image) {
    this.image = image;
    return this;
  }

  /** Shortname of the image, as returned by the referential. */
  @javax.annotation.Nonnull
  public String getImage() {
    return image;
  }

  public SourceDocker setConfiguration(Object configuration) {
    this.configuration = configuration;
    return this;
  }

  /** Configuration of the spec. */
  @javax.annotation.Nonnull
  public Object getConfiguration() {
    return configuration;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceDocker sourceDocker = (SourceDocker) o;
    return Objects.equals(this.image, sourceDocker.image) && Objects.equals(this.configuration, sourceDocker.configuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, configuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceDocker {\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    configuration: ").append(toIndentedString(configuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
