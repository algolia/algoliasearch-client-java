// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.ingestion;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Describes how a destination object should be resolved by means of applying a set of directives.
 */
public class MappingKitAction {

  @JsonProperty("id")
  private String id;

  @JsonProperty("enabled")
  private Boolean enabled;

  @JsonProperty("trigger")
  private String trigger;

  @JsonProperty("fieldDirectives")
  private List<MappingFieldDirective> fieldDirectives = new ArrayList<>();

  public MappingKitAction setId(String id) {
    this.id = id;
    return this;
  }

  /** ID to uniquely identify this action. */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public MappingKitAction setEnabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /** Whether this action has any effect. */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public MappingKitAction setTrigger(String trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * Condition which must be satisfied to apply the action. If this evaluates to false, the action
   * is not applied, and the process attempts to apply the next action, if any.
   */
  @javax.annotation.Nonnull
  public String getTrigger() {
    return trigger;
  }

  public MappingKitAction setFieldDirectives(List<MappingFieldDirective> fieldDirectives) {
    this.fieldDirectives = fieldDirectives;
    return this;
  }

  public MappingKitAction addFieldDirectives(MappingFieldDirective fieldDirectivesItem) {
    this.fieldDirectives.add(fieldDirectivesItem);
    return this;
  }

  /** Get fieldDirectives */
  @javax.annotation.Nonnull
  public List<MappingFieldDirective> getFieldDirectives() {
    return fieldDirectives;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappingKitAction mappingKitAction = (MappingKitAction) o;
    return (
      Objects.equals(this.id, mappingKitAction.id) &&
      Objects.equals(this.enabled, mappingKitAction.enabled) &&
      Objects.equals(this.trigger, mappingKitAction.trigger) &&
      Objects.equals(this.fieldDirectives, mappingKitAction.fieldDirectives)
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, enabled, trigger, fieldDirectives);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappingKitAction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    fieldDirectives: ").append(toIndentedString(fieldDirectives)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
