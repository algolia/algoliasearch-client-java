// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.ingestion;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/** Describes how a field should be resolved by applying a set of directives. */
public class MappingFieldDirective {

  @JsonProperty("fieldKey")
  private String fieldKey;

  @JsonProperty("value")
  private Map<String, Object> value = new HashMap<>();

  public MappingFieldDirective setFieldKey(String fieldKey) {
    this.fieldKey = fieldKey;
    return this;
  }

  /** Destination field key. */
  @javax.annotation.Nonnull
  public String getFieldKey() {
    return fieldKey;
  }

  public MappingFieldDirective setValue(Map<String, Object> value) {
    this.value = value;
    return this;
  }

  public MappingFieldDirective putValue(String key, Object valueItem) {
    this.value.put(key, valueItem);
    return this;
  }

  /** How the destination field should be resolved from the source. */
  @javax.annotation.Nonnull
  public Map<String, Object> getValue() {
    return value;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappingFieldDirective mappingFieldDirective = (MappingFieldDirective) o;
    return Objects.equals(this.fieldKey, mappingFieldDirective.fieldKey) && Objects.equals(this.value, mappingFieldDirective.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldKey, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappingFieldDirective {\n");
    sb.append("    fieldKey: ").append(toIndentedString(fieldKey)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
