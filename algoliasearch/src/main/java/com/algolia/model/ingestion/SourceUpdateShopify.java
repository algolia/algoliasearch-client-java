// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.ingestion;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.Objects;

/** SourceUpdateShopify */
@JsonDeserialize(as = SourceUpdateShopify.class)
public class SourceUpdateShopify implements SourceUpdateInput {

  @JsonProperty("collectionIDIndexing")
  private Boolean collectionIDIndexing;

  @JsonProperty("increaseProductCollectionLimit")
  private Boolean increaseProductCollectionLimit;

  @JsonProperty("defaultPriceRatioAsOne")
  private Boolean defaultPriceRatioAsOne;

  @JsonProperty("excludeOOSVariantsForPriceAtTRS")
  private Boolean excludeOOSVariantsForPriceAtTRS;

  @JsonProperty("includeVariantsInventory")
  private Boolean includeVariantsInventory;

  @JsonProperty("hasCollectionSearchPage")
  private Boolean hasCollectionSearchPage;

  @JsonProperty("productNamedTags")
  private Boolean productNamedTags;

  public SourceUpdateShopify setCollectionIDIndexing(Boolean collectionIDIndexing) {
    this.collectionIDIndexing = collectionIDIndexing;
    return this;
  }

  /**
   * Whether to index collection IDs. If your store has `has_collection_search_page` set to true,
   * collection IDs will be indexed even if `collectionIDIndexing` is false.
   */
  @javax.annotation.Nullable
  public Boolean getCollectionIDIndexing() {
    return collectionIDIndexing;
  }

  public SourceUpdateShopify setIncreaseProductCollectionLimit(Boolean increaseProductCollectionLimit) {
    this.increaseProductCollectionLimit = increaseProductCollectionLimit;
    return this;
  }

  /**
   * Whether to increase the number of indexed collections per product. If true, Algolia indexes 200
   * collections per product. If false, 100 collections per product are indexed.
   */
  @javax.annotation.Nullable
  public Boolean getIncreaseProductCollectionLimit() {
    return increaseProductCollectionLimit;
  }

  public SourceUpdateShopify setDefaultPriceRatioAsOne(Boolean defaultPriceRatioAsOne) {
    this.defaultPriceRatioAsOne = defaultPriceRatioAsOne;
    return this;
  }

  /**
   * Whether to set the default price ratio to 1 if no sale price is present. The price ratio is
   * determined by the ratio: `sale_price` / `regular_price`. If no sale price is present, the price
   * ratio would be 0. If `defaultPriceRatioAsOne` is true, the price ratio is indexed as 1 instead.
   */
  @javax.annotation.Nullable
  public Boolean getDefaultPriceRatioAsOne() {
    return defaultPriceRatioAsOne;
  }

  public SourceUpdateShopify setExcludeOOSVariantsForPriceAtTRS(Boolean excludeOOSVariantsForPriceAtTRS) {
    this.excludeOOSVariantsForPriceAtTRS = excludeOOSVariantsForPriceAtTRS;
    return this;
  }

  /**
   * Whether to exclude out-of-stock variants when determining the `max_variant_price` and
   * `min_variant_price` attributes.
   */
  @javax.annotation.Nullable
  public Boolean getExcludeOOSVariantsForPriceAtTRS() {
    return excludeOOSVariantsForPriceAtTRS;
  }

  public SourceUpdateShopify setIncludeVariantsInventory(Boolean includeVariantsInventory) {
    this.includeVariantsInventory = includeVariantsInventory;
    return this;
  }

  /** Whether to include an inventory with every variant for every product record. */
  @javax.annotation.Nullable
  public Boolean getIncludeVariantsInventory() {
    return includeVariantsInventory;
  }

  public SourceUpdateShopify setHasCollectionSearchPage(Boolean hasCollectionSearchPage) {
    this.hasCollectionSearchPage = hasCollectionSearchPage;
    return this;
  }

  /** Whether to include collection IDs and handles in the product records. */
  @javax.annotation.Nullable
  public Boolean getHasCollectionSearchPage() {
    return hasCollectionSearchPage;
  }

  public SourceUpdateShopify setProductNamedTags(Boolean productNamedTags) {
    this.productNamedTags = productNamedTags;
    return this;
  }

  /**
   * Whether to convert tags on products to named tags. To learn more, see [Named
   * tags](https://www.algolia.com/doc/integration/shopify/sending-and-managing-data/named-tags).
   */
  @javax.annotation.Nullable
  public Boolean getProductNamedTags() {
    return productNamedTags;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceUpdateShopify sourceUpdateShopify = (SourceUpdateShopify) o;
    return (
      Objects.equals(this.collectionIDIndexing, sourceUpdateShopify.collectionIDIndexing) &&
      Objects.equals(this.increaseProductCollectionLimit, sourceUpdateShopify.increaseProductCollectionLimit) &&
      Objects.equals(this.defaultPriceRatioAsOne, sourceUpdateShopify.defaultPriceRatioAsOne) &&
      Objects.equals(this.excludeOOSVariantsForPriceAtTRS, sourceUpdateShopify.excludeOOSVariantsForPriceAtTRS) &&
      Objects.equals(this.includeVariantsInventory, sourceUpdateShopify.includeVariantsInventory) &&
      Objects.equals(this.hasCollectionSearchPage, sourceUpdateShopify.hasCollectionSearchPage) &&
      Objects.equals(this.productNamedTags, sourceUpdateShopify.productNamedTags)
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      collectionIDIndexing,
      increaseProductCollectionLimit,
      defaultPriceRatioAsOne,
      excludeOOSVariantsForPriceAtTRS,
      includeVariantsInventory,
      hasCollectionSearchPage,
      productNamedTags
    );
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceUpdateShopify {\n");
    sb.append("    collectionIDIndexing: ").append(toIndentedString(collectionIDIndexing)).append("\n");
    sb.append("    increaseProductCollectionLimit: ").append(toIndentedString(increaseProductCollectionLimit)).append("\n");
    sb.append("    defaultPriceRatioAsOne: ").append(toIndentedString(defaultPriceRatioAsOne)).append("\n");
    sb.append("    excludeOOSVariantsForPriceAtTRS: ").append(toIndentedString(excludeOOSVariantsForPriceAtTRS)).append("\n");
    sb.append("    includeVariantsInventory: ").append(toIndentedString(includeVariantsInventory)).append("\n");
    sb.append("    hasCollectionSearchPage: ").append(toIndentedString(hasCollectionSearchPage)).append("\n");
    sb.append("    productNamedTags: ").append(toIndentedString(productNamedTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
