// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.ingestion;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;

/**
 * Which indexing operation to perform: - `addObject`: adds records to an index. Equivalent to the
 * \"Add a new record (with auto-generated object ID)\" operation. - `updateObject`: adds or
 * replaces records in an index. Equivalent to the \"Add or replace a record\" operation. -
 * `partialUpdateObject`: adds or updates attributes within records. Equivalent to the \"Add or
 * update attributes\" operation with the `createIfNoExists` parameter set to true. (If a record
 * with the specified `objectID` doesn't exist in the specified index, this action creates adds the
 * record to the index) - `partialUpdateObjectNoCreate`: same as `partialUpdateObject`, but with
 * `createIfNoExists` set to false. (A record isn't added to the index if its `objectID` doesn't
 * exist) - `deleteObject`: delete records from an index. Equivalent to the \"Delete a record\"
 * operation. - `delete`. Delete an index. Equivalent to the \"Delete an index\" operation. -
 * `clear`: delete all records from an index. Equivalent to the \"Delete all records from an index
 * operation\".
 */
public enum Action {
  ADD_OBJECT("addObject"),

  UPDATE_OBJECT("updateObject"),

  PARTIAL_UPDATE_OBJECT("partialUpdateObject"),

  PARTIAL_UPDATE_OBJECT_NO_CREATE("partialUpdateObjectNoCreate"),

  DELETE_OBJECT("deleteObject"),

  DELETE("delete"),

  CLEAR("clear");

  private final String value;

  Action(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static Action fromValue(String value) {
    for (Action b : Action.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}
