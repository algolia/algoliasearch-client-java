// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.ingestion;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** DestinationIndexName */
@JsonDeserialize(as = DestinationIndexName.class)
public class DestinationIndexName implements DestinationInput {

  @JsonProperty("indexName")
  private String indexName;

  @JsonProperty("recordType")
  private RecordType recordType;

  @JsonProperty("attributesToExclude")
  private List<String> attributesToExclude;

  public DestinationIndexName setIndexName(String indexName) {
    this.indexName = indexName;
    return this;
  }

  /** The index name to store data in. */
  @javax.annotation.Nonnull
  public String getIndexName() {
    return indexName;
  }

  public DestinationIndexName setRecordType(RecordType recordType) {
    this.recordType = recordType;
    return this;
  }

  /** Get recordType */
  @javax.annotation.Nullable
  public RecordType getRecordType() {
    return recordType;
  }

  public DestinationIndexName setAttributesToExclude(List<String> attributesToExclude) {
    this.attributesToExclude = attributesToExclude;
    return this;
  }

  public DestinationIndexName addAttributesToExclude(String attributesToExcludeItem) {
    if (this.attributesToExclude == null) {
      this.attributesToExclude = new ArrayList<>();
    }
    this.attributesToExclude.add(attributesToExcludeItem);
    return this;
  }

  /**
   * Determines the attributes to exclude from an Algolia record. To remove nested element, you can
   * separate the path to the element with dots (`.`): - \"foo.bar\": will remove `bar` from `foo`.
   * To remove elements from an array, you can use the following: - \"foo.[0].bar\": will only
   * remove `bar` from the first element of `foo`. - \"foo.[*].bar\": will remove `bar` from every
   * elements of `foo`.
   */
  @javax.annotation.Nullable
  public List<String> getAttributesToExclude() {
    return attributesToExclude;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationIndexName destinationIndexName = (DestinationIndexName) o;
    return (
      Objects.equals(this.indexName, destinationIndexName.indexName) &&
      Objects.equals(this.recordType, destinationIndexName.recordType) &&
      Objects.equals(this.attributesToExclude, destinationIndexName.attributesToExclude)
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(indexName, recordType, attributesToExclude);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationIndexName {\n");
    sb.append("    indexName: ").append(toIndentedString(indexName)).append("\n");
    sb.append("    recordType: ").append(toIndentedString(recordType)).append("\n");
    sb.append("    attributesToExclude: ").append(toIndentedString(attributesToExclude)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
