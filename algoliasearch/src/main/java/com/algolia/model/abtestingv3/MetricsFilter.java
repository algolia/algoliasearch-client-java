// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.abtestingv3;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.Objects;

/**
 * Boolean filter applied to the A/B test population. Each filter targets a boolean metric and
 * decides whether to include (true) or exclude (false) matching records.
 */
public class MetricsFilter {

  @JsonProperty("domain")
  private String domain;

  @JsonProperty("name")
  private String name;

  @JsonProperty("trackEffects")
  private Boolean trackEffects;

  @JsonProperty("includes")
  private Boolean includes;

  public MetricsFilter setDomain(String domain) {
    this.domain = domain;
    return this;
  }

  /** Metric domain (for example `abtesting`, `personalization`). */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public MetricsFilter setName(String name) {
    this.name = name;
    return this;
  }

  /** Public metric name. */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public MetricsFilter setTrackEffects(Boolean trackEffects) {
    this.trackEffects = trackEffects;
    return this;
  }

  /** Whether the experiment should record the effects of this filter. */
  @javax.annotation.Nullable
  public Boolean getTrackEffects() {
    return trackEffects;
  }

  public MetricsFilter setIncludes(Boolean includes) {
    this.includes = includes;
    return this;
  }

  /** If true, keep items that match the filter; if false, exclude them. */
  @javax.annotation.Nullable
  public Boolean getIncludes() {
    return includes;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricsFilter metricsFilter = (MetricsFilter) o;
    return (
      Objects.equals(this.domain, metricsFilter.domain) &&
      Objects.equals(this.name, metricsFilter.name) &&
      Objects.equals(this.trackEffects, metricsFilter.trackEffects) &&
      Objects.equals(this.includes, metricsFilter.includes)
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, name, trackEffects, includes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricsFilter {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    trackEffects: ").append(toIndentedString(trackEffects)).append("\n");
    sb.append("    includes: ").append(toIndentedString(includes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
