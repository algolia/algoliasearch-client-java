// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.abtestingv3;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.Objects;

/** Metric specific metadata. */
public class MetricMetadata {

  @JsonProperty("winsorizedValue")
  private Double winsorizedValue;

  @JsonProperty("mean")
  private Double mean;

  public MetricMetadata setWinsorizedValue(Double winsorizedValue) {
    this.winsorizedValue = winsorizedValue;
    return this;
  }

  /**
   * Only present in case the metric is 'revenue'. It is the amount exceeding the 95th percentile of
   * global revenue transactions involved in the AB Test. This amount is not considered when
   * calculating statistical significance. It is tied to a per revenue-currency pair contrary to
   * other global filter effects (such as outliers and empty search count).
   */
  @javax.annotation.Nullable
  public Double getWinsorizedValue() {
    return winsorizedValue;
  }

  public MetricMetadata setMean(Double mean) {
    this.mean = mean;
    return this;
  }

  /** Mean value for this metric. */
  @javax.annotation.Nullable
  public Double getMean() {
    return mean;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricMetadata metricMetadata = (MetricMetadata) o;
    return Objects.equals(this.winsorizedValue, metricMetadata.winsorizedValue) && Objects.equals(this.mean, metricMetadata.mean);
  }

  @Override
  public int hashCode() {
    return Objects.hash(winsorizedValue, mean);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricMetadata {\n");
    sb.append("    winsorizedValue: ").append(toIndentedString(winsorizedValue)).append("\n");
    sb.append("    mean: ").append(toIndentedString(mean)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
