// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.abtestingv3;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.Objects;

/** MetricResult */
public class MetricResult {

  @JsonProperty("name")
  private String name;

  @JsonProperty("updatedAt")
  private String updatedAt;

  @JsonProperty("value")
  private Double value;

  @JsonProperty("valueCIHigh")
  private Double valueCIHigh;

  @JsonProperty("valueCILow")
  private Double valueCILow;

  @JsonProperty("pValue")
  private Double pValue;

  @JsonProperty("dimension")
  private String dimension;

  @JsonProperty("metadata")
  private MetricMetadata metadata;

  @JsonProperty("criticalValue")
  private Double criticalValue;

  @JsonProperty("significant")
  private Boolean significant;

  public MetricResult setName(String name) {
    this.name = name;
    return this;
  }

  /** Get name */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public MetricResult setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /** Date and time when the metric was last updated, in RFC 3339 format. */
  @javax.annotation.Nonnull
  public String getUpdatedAt() {
    return updatedAt;
  }

  public MetricResult setValue(Double value) {
    this.value = value;
    return this;
  }

  /** Get value */
  @javax.annotation.Nonnull
  public Double getValue() {
    return value;
  }

  public MetricResult setValueCIHigh(Double valueCIHigh) {
    this.valueCIHigh = valueCIHigh;
    return this;
  }

  /**
   * The upper bound of the 95% confidence interval for the metric value. The confidence interval is
   * calculated using either the relative ratio or relative difference between the metric values for
   * the control and the variant. Relative ratio is used for metrics that are ratios (e.g.,
   * click-through rate, conversion rate), while relative difference is used for continuous metrics
   * (e.g., revenue).
   */
  @javax.annotation.Nullable
  public Double getValueCIHigh() {
    return valueCIHigh;
  }

  public MetricResult setValueCILow(Double valueCILow) {
    this.valueCILow = valueCILow;
    return this;
  }

  /**
   * The lower bound of the 95% confidence interval for the metric value. The confidence interval is
   * calculated using either the relative ratio or relative difference between the metric values for
   * the control and the variant. Relative ratio is used for metrics that are ratios (e.g.,
   * click-through rate, conversion rate), while relative difference is used for continuous metrics
   * (e.g., revenue).
   */
  @javax.annotation.Nullable
  public Double getValueCILow() {
    return valueCILow;
  }

  public MetricResult setpValue(Double pValue) {
    this.pValue = pValue;
    return this;
  }

  /**
   * PValue for the first variant (control) will always be 0. For the other variants, pValue is
   * calculated for the current variant based on the control.
   */
  @javax.annotation.Nonnull
  public Double getpValue() {
    return pValue;
  }

  public MetricResult setDimension(String dimension) {
    this.dimension = dimension;
    return this;
  }

  /** Dimension defined during test creation. */
  @javax.annotation.Nullable
  public String getDimension() {
    return dimension;
  }

  public MetricResult setMetadata(MetricMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /** Get metadata */
  @javax.annotation.Nullable
  public MetricMetadata getMetadata() {
    return metadata;
  }

  public MetricResult setCriticalValue(Double criticalValue) {
    this.criticalValue = criticalValue;
    return this;
  }

  /**
   * The value that was computed during error correction. It is used to determine significance of
   * the metric pValue. The critical value is calculated using Bonferroni or Benjamini-Hochberg
   * corrections, based on the given configuration during the A/B test creation.
   */
  @javax.annotation.Nullable
  public Double getCriticalValue() {
    return criticalValue;
  }

  public MetricResult setSignificant(Boolean significant) {
    this.significant = significant;
    return this;
  }

  /**
   * Whether the pValue is significant or not based on the critical value and the error correction
   * algorithm used.
   */
  @javax.annotation.Nullable
  public Boolean getSignificant() {
    return significant;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricResult metricResult = (MetricResult) o;
    return (
      Objects.equals(this.name, metricResult.name) &&
      Objects.equals(this.updatedAt, metricResult.updatedAt) &&
      Objects.equals(this.value, metricResult.value) &&
      Objects.equals(this.valueCIHigh, metricResult.valueCIHigh) &&
      Objects.equals(this.valueCILow, metricResult.valueCILow) &&
      Objects.equals(this.pValue, metricResult.pValue) &&
      Objects.equals(this.dimension, metricResult.dimension) &&
      Objects.equals(this.metadata, metricResult.metadata) &&
      Objects.equals(this.criticalValue, metricResult.criticalValue) &&
      Objects.equals(this.significant, metricResult.significant)
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, updatedAt, value, valueCIHigh, valueCILow, pValue, dimension, metadata, criticalValue, significant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricResult {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valueCIHigh: ").append(toIndentedString(valueCIHigh)).append("\n");
    sb.append("    valueCILow: ").append(toIndentedString(valueCILow)).append("\n");
    sb.append("    pValue: ").append(toIndentedString(pValue)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    criticalValue: ").append(toIndentedString(criticalValue)).append("\n");
    sb.append("    significant: ").append(toIndentedString(significant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
