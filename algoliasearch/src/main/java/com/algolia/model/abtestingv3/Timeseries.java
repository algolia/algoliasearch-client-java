// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.abtestingv3;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Timeseries */
public class Timeseries {

  @JsonProperty("abTestID")
  private Integer abTestID;

  @JsonProperty("variants")
  private List<TimeseriesVariant> variants = new ArrayList<>();

  public Timeseries setAbTestID(Integer abTestID) {
    this.abTestID = abTestID;
    return this;
  }

  /** Unique A/B test identifier. */
  @javax.annotation.Nonnull
  public Integer getAbTestID() {
    return abTestID;
  }

  public Timeseries setVariants(List<TimeseriesVariant> variants) {
    this.variants = variants;
    return this;
  }

  public Timeseries addVariants(TimeseriesVariant variantsItem) {
    this.variants.add(variantsItem);
    return this;
  }

  /**
   * A/B test timeseries variants. The first variant is your _control_ index, typically your
   * production index. All of the additional variants are indexes with changed settings that you
   * want to test against the control.
   */
  @javax.annotation.Nonnull
  public List<TimeseriesVariant> getVariants() {
    return variants;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Timeseries timeseries = (Timeseries) o;
    return Objects.equals(this.abTestID, timeseries.abTestID) && Objects.equals(this.variants, timeseries.variants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abTestID, variants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Timeseries {\n");
    sb.append("    abTestID: ").append(toIndentedString(abTestID)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
