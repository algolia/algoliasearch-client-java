import { shuffle } from '../utils/helpers';
import { Transporter } from '../utils/Transporter'; 
import { Headers, Host, Request, RequestOptions } from '../utils/types';
import { Requester } from '../utils/requester/Requester';

{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}

{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}

export class {{classname}} {
  protected authentications = {
    apiKey: 'Algolia-API-Key',
    appId: 'Algolia-Application-Id',
  };

  private transporter: Transporter;

  private applyAuthenticationHeaders(
    requestOptions: RequestOptions
  ): RequestOptions {
    if (requestOptions?.headers) {
      return {
        ...requestOptions,
        headers: {
          ...requestOptions.headers,
          'X-Algolia-API-Key': this.authentications.apiKey,
          'X-Algolia-Application-Id': this.authentications.appId,
        },
      };
    }

    return requestOptions;
  }
  
  private sendRequest<TResponse>(
    request: Request,
    requestOptions: RequestOptions
  ): Promise<TResponse> {
    return this.transporter.request(
      request,
      this.applyAuthenticationHeaders(requestOptions)
    );
  }

  constructor(
      appId: string,
      apiKey: string,
      {{#hasRegionalHost}}
        region: {{#isDeHost}}'de'{{/isDeHost}}{{#isEuHost}}'eu'{{/isEuHost}} | 'us',
      {{/hasRegionalHost}}
      options?: {requester?: Requester, hosts?: Host[]}
    ) {
    this.setAuthentication({ appId, apiKey });

    this.transporter = new Transporter({
      hosts: options?.hosts ?? this.getDefaultHosts(
        {{#isSearchHost}}appId{{/isSearchHost}}
        {{#hasRegionalHost}}region{{/hasRegionalHost}}
    ),
      baseHeaders: {
        'content-type': 'application/x-www-form-urlencoded'
      },
      userAgent: 'Algolia for Javascript',
      timeouts: {
        connect: 2,
        read: 5,
        write: 30,
      },
      requester: options?.requester,
    });
  }

  {{#isSearchHost}}
  public getDefaultHosts(appId: string): Host[] {
    return (
        [
          { url: `${appId}-dsn.algolia.net`, accept: 'read', protocol: 'https' },
          { url: `${appId}.algolia.net`, accept: 'write', protocol: 'https' },
        ] as Host[]
      ).concat(
        shuffle([
          { url: `${appId}-1.algolianet.com`, accept: 'readWrite', protocol: 'https' },
          { url: `${appId}-2.algolianet.com`, accept: 'readWrite', protocol: 'https' },
          { url: `${appId}-3.algolianet.com`, accept: 'readWrite', protocol: 'https' },
        ])
      );
  }
  {{/isSearchHost}}

  {{^isSearchHost}}
    {{#hasRegionalHost}}
    public getDefaultHosts(region: {{#isDeHost}}'de'{{/isDeHost}}{{#isEuHost}}'eu'{{/isEuHost}} | 'us' = 'us'): Host[] {
      return [{ url: `{{{host}}}.${region}.algolia.com`, accept: 'readWrite', protocol: 'https' }];
    }
    {{/hasRegionalHost}}

    {{^hasRegionalHost}}
    public getDefaultHosts(): Host[] {
      return [{ url: '{{{host}}}.algolia.io', accept: 'readWrite', protocol: 'https' }];
    }
    {{/hasRegionalHost}}
  {{/isSearchHost}}

  public setRequest(requester: Requester): void {
    this.transporter.setRequester(requester);
  }

  public setHosts(hosts: Host[]): void {
    this.transporter.setHosts(hosts);
  }

  public setAuthentication({ appId, apiKey }): void {
    this.authentications = {
      apiKey,
      appId,
    };
  }

  {{#operation}}
  /**
  {{#notes}}
  * {{&notes}}
  {{/notes}}
  {{#summary}}
  * @summary {{&summary}}
  {{/summary}}
  {{#allParams.0}}
    {{^bodyParams.0}}
      * @param {{nickname}} - The {{nickname}} object.
        {{#allParams}}
          * @param {{nickname}}.{{paramName}} {{^description}}The {{paramName}} object.{{/description}}{{#description}}{{{description}}}{{/description}}
        {{/allParams}}
    {{/bodyParams.0}}
    {{#bodyParams.0}}
      {{^queryParams.0}}
        {{^pathParams.0}}
          {{#bodyParams.0.isArray}}
            {{^bodyParams.1}}
              * @param {{nickname}} - The {{nickname}} object.
                {{#allParams}}
                  * @param {{nickname}}.{{paramName}} {{^description}}The {{paramName}} object.{{/description}}{{#description}}{{{description}}}{{/description}}
                {{/allParams}}
            {{/bodyParams.1}}
          {{/bodyParams.0.isArray}}
          {{^bodyParams.0.isArray}}
            * @param {{paramName}} {{^description}}The {{paramName}} object.{{/description}}{{#description}}{{{description}}}{{/description}}
          {{/bodyParams.0.isArray}}
        {{/pathParams.0}}
        {{#pathParams.0}}
          * @param {{nickname}} - The {{nickname}} object.
            {{#allParams}}
              * @param {{nickname}}.{{paramName}} {{^description}}The {{paramName}} object.{{/description}}{{#description}}{{{description}}}{{/description}}
            {{/allParams}}
        {{/pathParams.0}}
      {{/queryParams.0}}
      {{#queryParams.0}}
        * @param {{nickname}} - The {{nickname}} object.
          {{#allParams}}
            * @param {{nickname}}.{{paramName}} {{^description}}The {{paramName}} object.{{/description}}{{#description}}{{{description}}}{{/description}}
          {{/allParams}}
      {{/queryParams.0}}
    {{/bodyParams.0}}
  {{/allParams.0}}
  */
  public {{nickname}}(
    {{#allParams.0}}
      {{^bodyParams.0}}
        {
          {{#allParams}}
            {{paramName}},
          {{/allParams}}
        }: {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props
      {{/bodyParams.0}}
      {{#bodyParams.0}}
        {{^queryParams.0}}
          {{^pathParams.0}}
            {{#bodyParams.0.isArray}}
              {{^bodyParams.1}}
              {
                {{#allParams}}
                  {{paramName}},
                {{/allParams}}
              }: {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props
              {{/bodyParams.1}}
            {{/bodyParams.0.isArray}}
            {{^bodyParams.0.isArray}}
              {{#bodyParams}}
                {{paramName}}: {{{dataType}}},
              {{/bodyParams}}
            {{/bodyParams.0.isArray}}
          {{/pathParams.0}}
          {{#pathParams.0}}
            {
              {{#allParams}}
                {{paramName}},
              {{/allParams}}
            }: {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props
          {{/pathParams.0}}
        {{/queryParams.0}}
        {{#queryParams.0}}
          {
            {{#allParams}}
              {{paramName}},
            {{/allParams}}
          }: {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props
        {{/queryParams.0}}
      {{/bodyParams.0}}
    {{/allParams.0}}
      ) : Promise<{{{returnType}}}> {
    const path = '{{{path}}}'{{#pathParams}}.replace(
    {{=<% %>=}}
      '{<%baseName%>}',
    <%={{ }}=%>
      encodeURIComponent(String({{paramName}}))
    ){{/pathParams}};
    let headers: Headers = { Accept: 'application/json' };
    let queryParameters: Record<string, string> = {};

    {{#allParams}}
    {{#required}}
    if ({{#isBoolean}}{{paramName}} === null || {{paramName}} === undefined{{/isBoolean}}{{^isBoolean}}!{{paramName}}{{/isBoolean}}) {
      throw new Error('Parameter `{{paramName}}` is required when calling `{{nickname}}`.');
    }

    {{#vars}}
    {{#required}}
    if ({{#isBoolean}}{{paramName}}.{{baseName}} === null || {{paramName}}.{{baseName}} === undefined{{/isBoolean}}{{^isBoolean}}!{{paramName}}.{{baseName}}{{/isBoolean}}) {
      throw new Error('Parameter `{{paramName}}.{{baseName}}` is required when calling `{{nickname}}`.');
    }
    {{/required}}
    {{/vars}}

    {{/required}}
    {{/allParams}}
    {{#queryParams}}
    if ({{paramName}} !== undefined) {
      queryParameters['{{baseName}}'] = {{paramName}}.toString();
    }

    {{/queryParams}}
    {{#headerParams}}
    headers['{{baseName}}'] = {{paramName}};
    {{/headerParams}}

    const request: Request = {
      method: '{{httpMethod}}',
      path,
      {{#bodyParam}}
      data: {{paramName}},
      {{/bodyParam}}
    };

    const requestOptions: RequestOptions = {
      headers,
      queryParameters
    };

    return this.sendRequest(request, requestOptions);
  }
  {{/operation}}
}

{{#operation}}
{{#allParams.0}}
  {{^bodyParams.0}}
export type {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props = {
  {{#allParams}}
    {{#description}}
    /**
    * {{{description}}}
    */
    {{/description}}
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};
  {{/allParams}}
}
  {{/bodyParams.0}}
  {{#bodyParams.0}}
    {{^queryParams.0}}
      {{^pathParams.0}}
        {{#bodyParams.0.isArray}}
          {{^bodyParams.1}}
export type {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props = {
  {{#allParams}}
    {{#description}}
    /**
    * {{{description}}}
    */
    {{/description}}
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};
  {{/allParams}}
}
          {{/bodyParams.1}}
        {{/bodyParams.0.isArray}}
      {{/pathParams.0}}
      {{#pathParams.0}}
export type {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props = {
  {{#allParams}}
    {{#description}}
    /**
    * {{{description}}}
    */
    {{/description}}
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};
  {{/allParams}}
}
      {{/pathParams.0}}
    {{/queryParams.0}}
    {{#queryParams.0}}
export type {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props = {
  {{#allParams}}
    {{#description}}
    /**
    * {{{description}}}
    */
    {{/description}}
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};
  {{/allParams}}
}
    {{/queryParams.0}}
  {{/bodyParams.0}}
{{/allParams.0}}

{{/operation}}

{{/operations}}
